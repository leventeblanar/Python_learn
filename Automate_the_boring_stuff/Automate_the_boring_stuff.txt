This is a draft for the book "Automate the boring stuff" by Al Sweigart
# I am mostly drafting the terminology here and some additional small exercises

Link: https://automatetheboringstuff.com/2e/chapter1/


1. Python Basics

- Interactive shell - (eg.MU editor): app that lets you write code and run it, get the results back immediately
  REPL (Read - Evaulate - Print Loop)

- Expression (eg. 2 + 2): the most basic kind of programming instruction in the language
  Consists of: values(2) and operators(+ - * /) 
  They can always EVALUATE(reduce) down to a single values
  Order of operations is similar to mathematics

- Error: programs will crash if they contain code the computer can't understand - Python shows an error message
  This only means that the program stoppes running 

- Data Types: a category for values and every value belongs to exactly one data Types (eg. Integer, Float, String, Boolean, etc.)
  Integer: 42
  Float: 3.14
  Boolean: True
  String "Fortytwo"

- String Concatenation and Replication: meaning of an operator may change based on the data types of the balues next to it
  eg. + in math = addition || + in text = joining strings
  eg. * in math = multiplication || * in text = string replication (Alice * 5 = AliceAliceAliceAliceAlice)

- Storing values in variables: variable is like a box in the computers memory to store a single value.
  Expression results can be stored in variables.

- Assignment Statements: consists of a variable name, an equal sign, and the value to be stored (eg. spam = 42)
  A variable is initialized the first time a value is store din it - after that it can be used in Expressions
  Overwriting a variable: after being initialized, assigning a new value by simply calling it again like: spam =56

- Variable Names:
  A good variable describes the data it contains
  There are naming conventions like: current_balance, currentBalance, account4, _42, TOTAL_SUM, hello
  Variable names are case-sensitive: spam, SPAM, Spam and sPaM are four different variables

- Comments: python ignores comments (like any other programming language) - notes for ourselves on the functions and sections

- The print() function: diplays the string value iside it's parentheses on the screen
  Between the parentheses we pass ARGUMENTS

- The input() function: waits for the user to type some text on the keyboard and press enter
  an expression that evaluates to whatever string the user typed in

- The len() function: evaluates to the integer value of the number of charaters in that string

- The str(), int(), and float() functions: typecast functions to turn certain values with a certain type to a different one
  Meaning that if you have 29 as an integer, with str() you can turn this into '29' as a string

- flow control: the mechanizm that determines how a program should run certain processes.
  This means that the program not always runs things in a linear order, but determined by conditions, cycles and jumps





2. Flow control

- Boolean values: only has two types of values: True or False
  They are used in expressions and can be sotred in variables just like the other values

- Comparison operators: also called relational operators, compare two values and evaluate down to a signle Boolean value
  Opreators: ==, !=, <, >, <=, >=
  These evaluate to be true or False
  Don't mix the == (equal to) = (assignment op)

- Boolean operators: and, or, not 
  compare Boolean values, like comaprison opreators and they evaluate these expressions down to a Boolean value

- Binary Boolean Opreators: the 'and' and 'or' operators always take two Boolean values, so they are considered binary operators
  and - evaluates an expression to true if both boolean values are true
  or - evaluates an expression to true if one of the boolean values are true
  
- NOT Opeartor: opreators on only one Boolean value (this makes it a unary operator)
  Simply evaluates to the opposite boolean value

MIXING BOOLEAN AND COMPARISON operators

- Since comparison opreators avaulate to Boolean values, you can use them in expression swith Boolean opreators
  boolean operators (and, or, not) mixed with experessions (eg. 4 < 5)

Elements of Flow control
- Conditions: always evaluate dow to a boolean value, decides what to do based on whether its condition is true or false
  almost every flow control statement uses a condition

- Blocks of code: lines of code can be grouped together in Blocks
  determine the start and end by the indentation of the code section
  # Blocks begin when the indentation increases.
  # Blocks can contain other blocks.
  # Blocks end when the indentation decreases to zero or to a containing blockâ€™s indentation.

- Program exectution: is a term for the current instruction being executed. It is important that not every program executes from
  top to bottom. 

- Flow control Statements:
        - If statements: will execute if the condition of the if statement is true, the clause is skipped if it is false
                         consists of: if, a condition, a colon, indented block of code
        - Else statements: if statements can be followed by else statements, only executed when if statement is false
                            It does not have a condition as this is the last option after if
        - Elif statements: Else if is the middle ground, has a condition and will be executed when if is false, but
                            having a condition so can still evaluate as false, there can be as many elif statements as we wish
                            It is important that the order of the elif statement is important
                            
        - while loop statements: make a code execute over and over, until the condition is True
                                 Always has: while keyword, condition, colon, indented block of code

        - for Loops and the range() Function: only executes a code a number of times (for i in range(5))
                                              Always has: for keyword, a variable name, in keyword, range(), colon, idented block of code

        - an equivalent while loop: we can set a while loop to do what a for loop does (While i < 5), this requires a variable that
                                    can be overwriten so it once becames untrue for the condition

        - The Starting, Stopping, and Stepping Arguments to range(): some function can be called with multiple arguments separated by a comma,
        range() is one of them - this lets you change the integer passed to range() to follow any sequence of integers, including starting at a number other then zero.
        First arg.: where the for loop's variable starts
        Second arg.: up to but not including the number to stop at
        Third arg.: the step argument - the amount that the variable is increased by after each iteration

Importing Modules:
  - all python programs have built-in functions (eg. print(), input(), len()), python comes with standard library
  - each module is a python program that contains a related group of functions that can be embeded in your programs (eg. math, random, time)
  - to use these, we have to use the 'import' function on the beginning of our program

  from import Statements: - this way we import only certain moduls from a library

Ending a program early with the sys.exit() function
  - program execution ends when it reaches the bottom of the isntructins
  - we can end the program early with the sys.exit() function - we have to import the sys module for this one





3. Function

Functions are like mini programrs that an be compiled into a bigger, more complex one. We write functions and call them in the main() program
to dictate the flow and direction of the program itself

The process:
  - def statement is the body of the function - this signes the definition of the program itself, when we call a program we only write the name of it
  - when calling a function we write the name and a parentheses, and in the parentheses we can include arguments, that are received by the function
  - when the program execuition reaches the call, it will jump tot the top line in the function
  - MAIN GOAL of a function: group code that gets executed multiple times, without function you would need to copy and paste the program each time
  - We have to avoid copying the code as if there is a change in it, you have to correct it in every place

DEF statements with parameters: when we call functions we pass them values, called arguments
  - parameters are variables that contain arguments, when a function is called with arg., the arg., stored in the parameters
  - these values will be reset after the function is ended, program variables are gorgotten when the program terminates

Define, Call, Pass, Argument, Parameters
  - define: to create (eg. spam = 42)
  - def sayHello() - the def defines the sayHello() function
  - say Hello('Al') calls the now-created function
  - ('Al') - passing the string value 'Al' to the function - Argument
  - The argument 'Al' is assigned to a local variable named name. Variables that have arguments assigned to them are paramaters

Return Values and Return Statements
  - the value that a function call evaluates to is called the return value of the function
  - we can specify what the return value should be within a function
  - it consists of a 'return' keyword and the value or expression that the function should return
  - 